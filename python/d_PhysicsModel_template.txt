from HiggsAnalysis.CombinedLimit.PhysicsModel import *
import re

class %(fitname)s_PhysicsModel(PhysicsModel):
    def doParametersOfInterest(self):
        """Create POI and other parameters, and define the POI set."""
        rws = {}

        self.modelBuilder.doVar("d[0.0,-0.5,0.5]");
        self.modelBuilder.doSet("POI","d")
        
        ###FUNCTIONS BELOW

    def getYieldScale(self,bin,process):
        returnstring = ''
        #if it's not in the signal region, don't scale with PoI, and only include SM expectation
        if bin.find('SR')==-1 :
            if process in ['fq1','fq2','fg1','fg2','fg3','fg4'] :
                returnstring=0
            else :
                returnstring=1
        #the signal region processes must be scaled as functions of the PoI though
        else :
            #build the channel name to prepend to the reweighting function's name
            cname=''
            if bin.find('t1')!=-1 :
                cname+='t1_'
            elif bin.find('t2')!=-1 :
                cname+='t2_'
            elif bin.find('t3')!=-1 :
                cname+='t3_'
            if bin.find('muplus')!=-1 :
                cname+='muplus'
            elif bin.find('muminus')!=-1 :
                cname+='muminus'
            elif bin.find('elplus')!=-1 :
                cname+='elplus'
            elif bin.find('elminus')!=-1 :
                cname+='elminus'
            elif bin.find('mu')!=-1 :
                cname+='mu'
            elif bin.find('el')!=-1 :
                cname+='el'
            cname+='_'
            if process in ['fq0'] :
                returnstring=cname+'fqd0'
            elif process in ['fq1'] :
                returnstring=cname+'fqd1'
            elif process in ['fq2'] :
                returnstring=cname+'fqd2'
            elif process in ['fg0'] :
                returnstring=cname+'fgd0'
            elif process in ['fg2'] :
                returnstring=cname+'fgd2'
            elif process in ['fg3'] :
                returnstring=cname+'fgd3'
            elif process in ['fg4'] :
                returnstring=cname+'fgd4'
            #otherwise it's not something that needs scaling, returnstring=1
            else :
                returnstring=1
        #print 'process '+str(process)+' in bin '+str(bin)+' returns '+str(returnstring)
        return returnstring

%(fitname)s_PhysicsModel = %(fitname)s_PhysicsModel()
