from HiggsAnalysis.CombinedLimit.PhysicsModel import *
import re

class %(fitname)s_PhysicsModel(PhysicsModel):
    def doParametersOfInterest(self):
        """Create POI and other parameters, and define the POI set."""
        rws = {}

        self.modelBuilder.doVar("d[0.0,-10.0,10.0]");
        self.modelBuilder.doSet("POI","d")
        
        self.modelBuilder.factory_('expr::fqd0_t1("((1.)/(1.-@0*@0*((%(NQ1_t1)s)/(%(NQQ_t1)s))+@0*@0*((%(NQ2_t1)s)/(%(NQQ_t1)s))))",d)')
        self.modelBuilder.factory_('expr::fqd1_t1("((-1.*@0*@0)/(1.-@0*@0*((%(NQ1_t1)s)/(%(NQQ_t1)s))+@0*@0*((%(NQ2_t1)s)/(%(NQQ_t1)s))))",d)')
        self.modelBuilder.factory_('expr::fqd2_t1("((@0*@0)/(1.-@0*@0*((%(NQ1_t1)s)/(%(NQQ_t1)s))+@0*@0*((%(NQ2_t1)s)/(%(NQQ_t1)s))))",d)')
        self.modelBuilder.factory_('expr::fgd0_t1("((1.)/(1.+@0*@0*((%(NG2_t1)s)/(%(NGG_t1)s))+@0*@0*((%(NG3_t1)s)/(%(NGG_t1)s))+@0*@0*@0*@0*((%(NG4_t1)s)/(%(NGG_t1)s))))",d)')
        self.modelBuilder.factory_('expr::fgd1_t1("(0.)",d)')
        self.modelBuilder.factory_('expr::fgd2_t1("((@0*@0)/(1.+@0*@0*((%(NG2_t1)s)/(%(NGG_t1)s))+@0*@0*((%(NG3_t1)s)/(%(NGG_t1)s))+@0*@0*@0*@0*((%(NG4_t1)s)/(%(NGG_t1)s))))",d)')
        self.modelBuilder.factory_('expr::fgd3_t1("((@0*@0)/(1.+@0*@0*((%(NG2_t1)s)/(%(NGG_t1)s))+@0*@0*((%(NG3_t1)s)/(%(NGG_t1)s))+@0*@0*@0*@0*((%(NG4_t1)s)/(%(NGG_t1)s))))",d)')
        self.modelBuilder.factory_('expr::fgd4_t1("((@0*@0*@0*@0)/(1.+@0*@0*((%(NG2_t1)s)/(%(NGG_t1)s))+@0*@0*((%(NG3_t1)s)/(%(NGG_t1)s))+@0*@0*@0*@0*((%(NG4_t1)s)/(%(NGG_t1)s))))",d)')

        self.modelBuilder.factory_('expr::fqd0_t2("((1.)/(1.-@0*@0*((%(NQ1_t2)s)/(%(NQQ_t2)s))+@0*@0*((%(NQ2_t2)s)/(%(NQQ_t2)s))))",d)')
        self.modelBuilder.factory_('expr::fqd1_t2("((-1.*@0*@0)/(1.-@0*@0*((%(NQ1_t2)s)/(%(NQQ_t2)s))+@0*@0*((%(NQ2_t2)s)/(%(NQQ_t2)s))))",d)')
        self.modelBuilder.factory_('expr::fqd2_t2("((@0*@0)/(1.-@0*@0*((%(NQ1_t2)s)/(%(NQQ_t2)s))+@0*@0*((%(NQ2_t2)s)/(%(NQQ_t2)s))))",d)')
        self.modelBuilder.factory_('expr::fgd0_t2("((1.)/(1.+@0*@0*((%(NG2_t2)s)/(%(NGG_t2)s))+@0*@0*((%(NG3_t2)s)/(%(NGG_t2)s))+@0*@0*@0*@0*((%(NG4_t2)s)/(%(NGG_t2)s))))",d)')
        self.modelBuilder.factory_('expr::fgd1_t2("(0.)",d)')
        self.modelBuilder.factory_('expr::fgd2_t2("((@0*@0)/(1.+@0*@0*((%(NG2_t2)s)/(%(NGG_t2)s))+@0*@0*((%(NG3_t2)s)/(%(NGG_t2)s))+@0*@0*@0*@0*((%(NG4_t2)s)/(%(NGG_t2)s))))",d)')
        self.modelBuilder.factory_('expr::fgd3_t2("((@0*@0)/(1.+@0*@0*((%(NG2_t2)s)/(%(NGG_t2)s))+@0*@0*((%(NG3_t2)s)/(%(NGG_t2)s))+@0*@0*@0*@0*((%(NG4_t2)s)/(%(NGG_t2)s))))",d)')
        self.modelBuilder.factory_('expr::fgd4_t2("((@0*@0*@0*@0)/(1.+@0*@0*((%(NG2_t2)s)/(%(NGG_t2)s))+@0*@0*((%(NG3_t2)s)/(%(NGG_t2)s))+@0*@0*@0*@0*((%(NG4_t2)s)/(%(NGG_t2)s))))",d)')

        self.modelBuilder.factory_('expr::fqd0_t3("((1.)/(1.-@0*@0*((%(NQ1_t3)s)/(%(NQQ_t3)s))+@0*@0*((%(NQ2_t3)s)/(%(NQQ_t3)s))))",d)')
        self.modelBuilder.factory_('expr::fqd1_t3("((-1.*@0*@0)/(1.-@0*@0*((%(NQ1_t3)s)/(%(NQQ_t3)s))+@0*@0*((%(NQ2_t3)s)/(%(NQQ_t3)s))))",d)')
        self.modelBuilder.factory_('expr::fqd2_t3("((@0*@0)/(1.-@0*@0*((%(NQ1_t3)s)/(%(NQQ_t3)s))+@0*@0*((%(NQ2_t3)s)/(%(NQQ_t3)s))))",d)')
        self.modelBuilder.factory_('expr::fgd0_t3("((1.)/(1.+@0*@0*((%(NG2_t3)s)/(%(NGG_t3)s))+@0*@0*((%(NG3_t3)s)/(%(NGG_t3)s))+@0*@0*@0*@0*((%(NG4_t3)s)/(%(NGG_t3)s))))",d)')
        self.modelBuilder.factory_('expr::fgd1_t3("(0.)",d)')
        self.modelBuilder.factory_('expr::fgd2_t3("((@0*@0)/(1.+@0*@0*((%(NG2_t3)s)/(%(NGG_t3)s))+@0*@0*((%(NG3_t3)s)/(%(NGG_t3)s))+@0*@0*@0*@0*((%(NG4_t3)s)/(%(NGG_t3)s))))",d)')
        self.modelBuilder.factory_('expr::fgd3_t3("((@0*@0)/(1.+@0*@0*((%(NG2_t3)s)/(%(NGG_t3)s))+@0*@0*((%(NG3_t3)s)/(%(NGG_t3)s))+@0*@0*@0*@0*((%(NG4_t3)s)/(%(NGG_t3)s))))",d)')
        self.modelBuilder.factory_('expr::fgd4_t3("((@0*@0*@0*@0)/(1.+@0*@0*((%(NG2_t3)s)/(%(NGG_t3)s))+@0*@0*((%(NG3_t3)s)/(%(NGG_t3)s))+@0*@0*@0*@0*((%(NG4_t3)s)/(%(NGG_t3)s))))",d)')

    def getYieldScale(self,bin,process):
        if bin.find('SR')==-1 :
            return 1
        if bin.find('t1')!=-1 :
            if process in ['fqp0','fqm0'] :
                return 'fqd0_t1'
            elif process in ['fqp1','fqm1'] :
                return 'fqd1_t1'
            elif process in ['fqp2','fqm2'] :
                return 'fqd2_t1'
            elif process in ['fg0'] :
                return 'fgd0_t1'
            elif process in ['fg1'] :
                return 'fgd1_t1'
            elif process in ['fg2'] :
                return 'fgd2_t1'
            elif process in ['fg3'] :
                return 'fgd3_t1'
            elif process in ['fg4'] :
                return 'fgd4_t1'
        if bin.find('t2')!=-1 :
            if process in ['fqp0','fqm0'] :
                return 'fqd0_t2'
            elif process in ['fqp1','fqm1'] :
                return 'fqd1_t2'
            elif process in ['fqp2','fqm2'] :
                return 'fqd2_t2'
            elif process in ['fg0'] :
                return 'fgd0_t2'
            elif process in ['fg1'] :
                return 'fgd1_t2'
            elif process in ['fg2'] :
                return 'fgd2_t2'
            elif process in ['fg3'] :
                return 'fgd3_t2'
            elif process in ['fg4'] :
                return 'fgd4_t2'
        if bin.find('t3')!=-1 :
            if process in ['fqp0','fqm0'] :
                return 'fqd0_t3'
            elif process in ['fqp1','fqm1'] :
                return 'fqd1_t3'
            elif process in ['fqp2','fqm2'] :
                return 'fqd2_t3'
            elif process in ['fg0'] :
                return 'fgd0_t3'
            elif process in ['fg1'] :
                return 'fgd1_t3'
            elif process in ['fg2'] :
                return 'fgd2_t3'
            elif process in ['fg3'] :
                return 'fgd3_t3'
            elif process in ['fg4'] :
                return 'fgd4_t3'
        return 1


%(fitname)s_PhysicsModel = %(fitname)s_PhysicsModel()
